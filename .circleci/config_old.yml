version: 2.1 

orbs:
  aws-ecr: circleci/aws-ecr@9.3.4
  aws-ecs: circleci/aws-ecs@6.0.0
  aws-cli: circleci/aws-cli@5.1.0 
  node: circleci/node@6.1.0

jobs:
  build:
    docker:
      - image: cimg/node:22.9.0
    steps:
      - checkout
      - setup_remote_docker
      #is docker daemon running cannot connect to docker error gone after adding setup_remote_docker
      - node/install-packages:
          pkg-manager: npm
      - run: 
          name: Install aws cli
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      
      - run:
          name: Build and push Docker Image
          command: |
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 010526248296.dkr.ecr.ap-south-1.amazonaws.com
            docker build -t circleci-node .
            docker tag circleci-node:latest 010526248296.dkr.ecr.ap-south-1.amazonaws.com/circleci-node:latest
            docker push 010526248296.dkr.ecr.ap-south-1.amazonaws.com/circleci-node:latest

  register-task-definition:
    docker:
      - image: cimg/node:22.9.0
    steps:
      - checkout
      # added checkout, because workdirectory didn't change and still was in /home/circleci/project and definition was not getting my tsk-def file
      - aws-cli/setup:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
          region: $AWS_REGION
      # - run:
      #     name: pwd and test
      #     command: |
      #       pwd
      #       echo "Test file" > test.txt
      #       cat test.txt
      - run:
          name: Register New Task Definition
          command: |
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json | jq -r .taskDefinition.taskDefinitionArn)
            echo "New Task Definition ARN: $NEW_TASK_DEF_ARN"
            echo "$NEW_TASK_DEF_ARN" > new-task-def-arn.txt
      - run:
          name: echo new task def 
          command: echo $NEW_TASK_DEF_ARN
      - run:
          name: List Files 
          command: ls -la
#ls here shows new_task_def_arn.txt exists but file does reach deploy, using workspace to share data between jobs
      - persist_to_workspace:
          root: .
          paths:
            - new-task-def-arn.txt
  deploy:
    docker:
      - image: cimg/node:22.9.0
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
          region: $AWS_REGION
      - attach_workspace:
          at: .
      - run:
          name: List Files 
          command: ls -la
      - run:
          name: Update ECS Service
          command: |
            NEW_TASK_DEF_ARN=$(cat new-task-def-arn.txt)
            aws ecs update-service --cluster circleci-node --service circleci-node --task-definition $NEW_TASK_DEF_ARN --force-new-deployment 
          # input --circleci <cluster name> --service <service name>

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - register-task-definition:
          requires:
            - build
      - deploy:
          requires:
            - register-task-definition












# version: 2.1
# jobs:
#   deploy:
#     docker:
#       - image: arvindr226/alpine-ssh
#     steps:
#       # - run: ssh -oStrictHostKeyChecking=no -v $USER@$DNS "./deploy.sh"
#       - run:
#           name: Deploy to ec2
#           command: |
#             ssh -oStrictHostKeyChecking=no -i ~/.ssh/circleci $USER@$DNS "bash /tmp/deploy.sh"

# workflows:
#   deploy-to-ec2:
#     jobs:
#       - deploy


# jobs:
#   verify-deployment:
#     executor: aws-cli/default
#     steps:
#       - aws-cli/install
#       - aws-cli/setup:
#           aws-access-key-id: AWS_SECRET_ACCESS_KEY
#           aws-region: AWS_DEFAULT_REGION
#           aws-secret-access-key: AWS_DEFAULT_REGION
#       - run:
#           name: Get last task definition
#           command: >  
#             TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
#                 --task-definition ${MY_APP_PREFIX}-service \
#                 --output text \
#                 --query 'taskDefinition.taskDefinitionArn')
#             echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >>
#             "$BASH_ENV"
#       - aws-ecs/verify-revision-is-deployed:
#           family: '${MY_APP_PREFIX}-service'
#           cluster: '${MY_APP_PREFIX}-cluster'
#           task-definition-arn: '${TASK_DEFINITION_ARN}'

# workflows:
#   build-and-deploy:
#     jobs:
#       - aws-ecr/build-and-push-image: # orb built-in job
#           repo: '${MY_APP_PREFIX}'
#           tag: '${CIRCLE_SHA1}'
#       - aws-ecs/deploy-service-update: # orb built-in job
#           requires:
#             - aws-ecr/build-and-push-image
#           family: '${MY_APP_PREFIX}-service'
#           cluster: '${MY_APP_PREFIX}-cluster'
#           container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}'
#       - verify-deployment:
#           requires:
#             - aws-ecs/deploy-service-update


version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@x.y.z
  aws-ecs: circleci/aws-ecs@0x.y.z

workflows:
  build-and-deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image # only run this job once aws-ecr/build-and-push-image has completed
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,tag=${CIRCLE_SHA1}"


      # - aws-ecr/push-image:
          # repository: '${MY_APP_PREFIX}'
          # tag: latest
          # region: $AWS_REGION
      # - run: 
          # name : push image

# test

